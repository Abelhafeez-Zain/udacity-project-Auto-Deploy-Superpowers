version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end1
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end2
          command: |
            cd frontend
            npm run build     
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i typescript@3.1.6 run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit fix --audit-level=critical --prefix backend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit fix --audit-level=critical --prefix backend

  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd frontend
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL=$API_URL" >> .env
            echo ${API_URL}
            npm install
            npm run build
            ls -la 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -la 
            aws s3 sync dist s3://udapeople-123lr/
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [a7:a2:c1:61:91:19:e8:6e:ab:4e:c6:53:bb:8e:00:d2]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Deploy backend
          no_output_timeout: 25m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get the URL of Backend and smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-123lr.s3-website-us-west-1.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations  

  cfront-upd-and-clean:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update CloudFront distribution
          command: |
            # your code here
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID:0:7}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            echo "Update CloudFront"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name Udapeople-Cloudfront \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID:0:7}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID:0:7}" ]]
            then
              echo "deleting stacks of ${OLD_CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations  

cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]