version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end1
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end2
          command: |
            cd frontend
            npm run build     
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i typescript@3.1.6 run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit fix --audit-level=critical --prefix backend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm audit fix --audit-level=critical --prefix backend
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Store Backend URL in Memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP:"
            echo ${BACKEND_IP}
            curl --header "Content-Type: text/plain" \
               --header "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_IP} https://api.memstash.io/values/backendip
      - run:
          name: Add backend ip to ansible inventory
          command: |
            yum install tar -y
            yum install gzip -y 
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd .circleci/ansible/
            echo "[web]" > ./inventory.txt
            echo ${BACKEND_IP} >> ./inventory.txt
            cat ./inventory.txt
      - persist_to_workspace: 
          root: ~/
          paths:
            - project
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"       

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys: 
          fingerprints: [46:72:f9:be:e4:17:c4:cb:36:38:77:91:53:87:a9:d8]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Configure server
          no_output_timeout: 20m
          command: |
            pwd
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      # - destroy-environment:
      #     WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install AWS-CLI
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"

            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd backend
            sudo npm install
            npm run build
            sudo npm run > migration_output.txt
            cat migration_output.txt
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migration_output.txt
            result=0
            if grep -q "has been executed successfully" migration_output.txt
            then
              result=1
            fi
            curl -H "Content-Type: text/plain" \
            -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data ${result} https://api.memstash.io/values/migration
            
            echo ${result}
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd frontend
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL=$API_URL" >> .env
            echo ${API_URL}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo ${WorkflowID}
            npm install
            npm run build
            ls -la 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -la 
            aws s3 cp dist s3://udapeople-kkzain287dhjpp6288/ --recursive
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [46:72:f9:be:e4:17:c4:cb:36:38:77:91:53:87:a9:d8]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl  
            pip install awscli 
            apk add --update openssh-client
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          no_output_timeout: 25m
          command: | 
            echo ENVIROMENT=$ENVIROMENT > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            BACKEND_IP=`cat inventory.txt | head -2 | tail -1`
            echo "BACKEND_IP: ${BACKEND_IP}"
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get the URL of Backend and smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            echo ${BACKEND_IP}
            if curl "${BACKEND_IP}:3030/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-kkzain287dhjpp6288.s3-website-us-east-1.amazonaws.com"
            curl -s $URL | grep "Welcome"
            if curl -s $URL | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # - destroy-environment:
      #     WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations 
       
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            # Install nodejs on Fedora Core based on nodesource website instructions
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)

            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 

            aws cloudformation deploy \
            --template-file /root/project/.circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
       # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations  
 
  cleanup:
      docker:
        - image: circleci/node:13.8.0
      steps: 
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              
              export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text)

              echo OldWorkflowID: "$OldWorkflowID"
              echo STACKS: "$STACKS" 
        - run:
            name: Remove old stacks and files
            command: |
              if [ ! -z $OldWorkflowID ]
              then
                echo "I'm HERE !!!"
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws s3 rb s3://udapeople-${OldWorkflowID} --force
                aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
                echo "Stacks deleted succesfully"
              else
                echo "Fresh New Stacks"
              fi
        - destroy-environment:
            WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations 
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]